import random

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardButton, InlineKeyboardBuilder

from bot import bot
import data
from models.users import User, get_user_data, update_user_data, clear_user_data, increment_discount
from tools import hide_buttons, carousel_render
from keyboards import to_carousel_keyboard

second_level_router: Router = Router()


# Second level
@second_level_router.callback_query(F.data == "second_level_intro")
async def second_level_intro(callback_query: CallbackQuery):
    await hide_buttons(callback_query=callback_query)

    introdution_text = (
        "üåü –£—Ä–æ–≤–µ–Ω—å 2: –ö–∞–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Å –ø–æ–º–æ—â—å—é –¥–∏–∑–∞–π–Ω–∞?"
        "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: —Å–∫–∏–¥–∫–∞ +10% –∏–ª–∏ +20%"
    )

    await callback_query.message.answer(text=introdution_text)

    next_button = await to_carousel_keyboard(level="second_level")

    await callback_query.message.answer(
        text="–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –º–µ—Ç–æ–¥–∞–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∏:",
        reply_markup=next_button.as_markup(resize_keyboard=True),
    )


# Second level information carousel
@second_level_router.callback_query(F.data.startswith("second_level_carousel"))
async def second_level_carousel(callback_query: CallbackQuery):
    level = callback_query.data[:callback_query.data.find("level") + 5]

    await carousel_render(callback_query=callback_query, level=level)


# Second level continue
@second_level_router.callback_query(F.data == "second_level_continue")
async def second_level_continue(callback_query: CallbackQuery):
    await hide_buttons(callback_query=callback_query)

    buttons = InlineKeyboardBuilder()
    buttons.add(
        InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="second_level_task"),
        InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–æ–≤", callback_data="skip_to_3")
    )

    text = "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–∫—Ä–µ–ø–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö."
    await callback_query.message.answer(
        text=text,
        reply_markup=buttons.as_markup(resize_keyboard=True)
    )


# Second level task
@second_level_router.callback_query(F.data == "second_level_task")
async def second_level_task_info(callback_query: CallbackQuery):
    await hide_buttons(callback_query=callback_query)

    task_text = "–ó–∞–¥–∞–Ω–∏–µ: –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ"

    origin_results = await data.get_second_level_answers()
    user_results = {}
    button = InlineKeyboardBuilder()
    button.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="answer_"))

    await callback_query.message.answer(
        text=task_text,
        reply_markup=button.as_markup(reply_keyboard=True)
    )

    @second_level_router.callback_query(F.data.startswith("answer_"))
    async def second_level_answers(callback_query_a: CallbackQuery):

        current_answer: str = ""

        try:
            current_answer = callback_query_a.data.split("_")[1]
            origin_results.pop(current_answer)
        except (KeyError, IndexError):
            pass

        if current_answer != "":
            user_results.update({current_answer: callback_query_a.message.text})

            await bot.edit_message_text(
                chat_id=callback_query_a.message.chat.id,
                message_id=callback_query_a.message.message_id,
                text=callback_query_a.message.text + f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {current_answer}"
            )
        else:
            await hide_buttons(callback_query=callback_query_a)

        if len(origin_results) == 0:
            await hide_buttons(callback_query=callback_query_a)
            await second_level_check_result(
                callback_query=callback_query_a,
                user_results=user_results
            )

        answers_keyboard = InlineKeyboardBuilder()
        for key in origin_results.keys():
            answers_keyboard.add(InlineKeyboardButton(text=key, callback_data=f"answer_{key}"))
        answers_keyboard.adjust(2)

        answer, text = random.sample(list(origin_results.items()), 1)[0]

        await callback_query_a.message.answer(
            text=text,
            reply_markup=answers_keyboard.as_markup(resize_keyboard=True)
        )


# Second level result checking
async def second_level_check_result(callback_query: CallbackQuery, user_results: dict):
    origin_results = await data.get_second_level_answers()
    if user_results == origin_results:
        await increment_discount(user_id=callback_query.message.chat.id)

        text = ("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–µ—Ä–∂–∏ 10% —Å–∫–∏–¥–∫–∏ ü•≥. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ 10% –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—à—å –Ω–∞ "
                "–±–æ–Ω—É—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å")

        buttons = InlineKeyboardBuilder()
        buttons.add(
            InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="bonus_task"),
            InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–∞", callback_data="skip_to_3"),
        )

        await callback_query.message.answer(
            text=text,
            reply_markup=buttons.as_markup(resize_keyboard=True)
        )
    else:
        buttons = InlineKeyboardBuilder()
        buttons.add(
            InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="second_level_task"),
            InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="bonus_task"),
            InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–∞", callback_data="skip_to_3"),
        )
        buttons.adjust(1)

        text = ("–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –ø–æ–ª—É—á–∏—Ç—å "
                "10% —Å–∫–∏–¥–∫—É –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–æ–≤. –í—ã–±–∏—Ä–∞–π:")

        await callback_query.message.answer(
            text=text,
            reply_markup=buttons.as_markup(resize_keyboard=True)
        )


# Second level bonus task
@second_level_router.callback_query(F.data == "bonus_task")
async def bonus_task(callback_query: CallbackQuery):
    await hide_buttons(callback_query=callback_query)

    text = ("–ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ —É —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤ '–ü–ª—é—Å—ã ...', '–ú–∏–Ω—É—Å—ã ...', '–ö ...', '–ò–∑...'")
    await callback_query.message.answer(text=text)


@second_level_router.message(F.text.upper().contains(data.SECOND_LEVEL_ANSWER_TRIGGER))
async def get_answer(message: Message):

    user_id = message.from_user.id
    await increment_discount(user_id=user_id)
    await update_user_data(user_id=user_id, pain=message.text)

    next_button = InlineKeyboardBuilder()
    next_button.add(
        InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="third_level_intro")
    )

    text = (
        "üéÆ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è –æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –¥–∏–∑–∞–π–Ω–µ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –±–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞—Å—Ç–∏. "
        "–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É?"
    )

    await message.answer(
        text=text,
        reply_markup=next_button.as_markup(resize_keyboard=True)
    )

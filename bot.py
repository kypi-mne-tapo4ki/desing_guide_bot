import asyncio
import logging
import time
from typing import Union

import pymongo

# from aiogram.utils.callback_answer import CallbackAnswerMiddleware
import aiogram.utils.keyboard as keyboard

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters.command import Command
from config_reader import config

logging.basicConfig(level=logging.INFO)

# Bot settings
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()

# DB Connection
client = pymongo.MongoClient(host=config.db_host.get_secret_value())
database = client[config.db_name.get_secret_value()]
collection = database[config.collection_name.get_secret_value()]


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –¥–∏–∑–∞–π–Ω-–∏–≥—Ä—É - –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, "
        "–∫–∞–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ê —Ç–∞–∫–∂–µ "
        "–ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –º–æ–∏ —É—Å–ª—É–≥–∏ –¥–æ 40%! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Å–∞–º—ã—Ö "
        "—Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!"
    )

    await message.answer(text=welcome_text, parse_mode="HTML")
    await main_menu(message)


cancel_button = keyboard.ReplyKeyboardBuilder()
cancel_button.add(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã"))


async def main_menu(message: types.Message):
    user_data = await get_user_data(message.from_user.id)

    text = "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã'"
    if user_data["discount"] != 0:
        text = (
            "–ü–æ—Ö–æ–∂–µ –≤—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Ä–∞–Ω–µ–µ. –ï—Å–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—ã –≤–∞—à–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã —Å–≥–æ—Ä—è—Ç. "
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?\n"
        ) + text

    builder = keyboard.ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã"))

    await message.answer(
        text=text,
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@dp.message(F.text == "–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã")
async def new_game(message: types.Message):
    await save_user_data(message.from_user.id, discount=0, user_answer="")

    await message.answer(
        text="üí° –£—Ä–æ–≤–µ–Ω—å 1: –ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω? –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: —Å–∫–∏–¥–∫–∞ 10%",
        reply_markup=cancel_button.as_markup(resize_keyboard=True),
    )

    next_button = keyboard.InlineKeyboardBuilder()
    next_button.add(
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="first_question")
    )

    introduction_text = (
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –ø–æ—á–µ–º—É –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω —Ç–∞–∫ –≤–∞–∂–µ–Ω:"
        "\nüëÅÔ∏è –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–µ–ª–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏"
        "–¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –≠—Ç–æ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ –æ–Ω–∏ –≤–∏–¥—è—Ç."
        "\nüß† –ü–æ–Ω–∏–º–∞–Ω–∏–µ: –ì—Ä–∞—Ñ–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –∏ –∫–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç."
        "–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç —Ä–µ—à–∞–µ—Ç –∏—Ö –ø—Ä–æ–±–ª–µ–º—ã."
        "\nü§ù –î–æ–≤–µ—Ä–∏–µ: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å–æ–∑–¥–∞–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —É–±–µ–¥–∏—Ç—å "
        "–∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä."
    )

    await message.answer(
        text=introduction_text, reply_markup=next_button.as_markup(resize_keybord=True)
    )


@dp.callback_query(F.data == "first_question")
async def first_question_handle(callback_query: types.CallbackQuery):
    # Hide inline button from previous message
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=callback_query.message.text,
        reply_markup=None,  # Hide keyboard
    )

    await callback_query.message.answer(
        text="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=cancel_button.as_markup(resize_keyboard=True),
    )

    first_question_buttons = keyboard.InlineKeyboardBuilder()
    first_question_buttons.add(
        types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="first_answer")
    )
    first_question_buttons.add(
        types.InlineKeyboardButton(
            text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–∞", callback_data="cancel_answer"
        )
    )

    question_one_text = (
        "ü§î–í–æ–ø—Ä–æ—Å: –ê —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏"
        " –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?"
    )

    await callback_query.message.answer(
        text=question_one_text,
        reply_markup=first_question_buttons.as_markup(resize_keyboard=True),
    )


@dp.callback_query(F.data == "first_answer")
async def first_answer(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç")

    @dp.message(F.text)
    async def get_answer(message: types.Message):
        print(message.text)
        await save_user_data(
            user_id=message.from_user.id, discount=10, user_answer=message.text
        )

        next_button = keyboard.InlineKeyboardBuilder()
        next_button.add(
            types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="second_question")
        )

        text = (
            "üéÆ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è –æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –¥–∏–∑–∞–π–Ω–µ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –±–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞—Å—Ç–∏. "
            "–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É?"
        )
        await message.answer(
            text=text, reply_markup=next_button.as_markup(resize_keyboard=True)
        )


@dp.callback_query(F.data == "second_question")
async def second_question(callback_query: types.CallbackQuery):
    # Hide inline button from previous message
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=callback_query.message.text,
        reply_markup=None,  # Hide keyboard
    )

    introdution_text = (
        "üåü –£—Ä–æ–≤–µ–Ω—å 2: –ö–∞–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Å –ø–æ–º–æ—â—å—é –¥–∏–∑–∞–π–Ω–∞?"
        "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: —Å–∫–∏–¥–∫–∞ +10%"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –º–µ—Ç–æ–¥–∞–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∏:"
    )

    await callback_query.message.answer(
        text=introdution_text,
        reply_markup=cancel_button.as_markup(resize_keyboard=True),
    )


@dp.message(F.text == "–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã")
async def handle_cancel_game(message: types.Message):
    # –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–µ—Ä–Ω–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.",
    )
    await main_menu(message)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def save_user_data(user_id, discount, user_answer):
    data = {"user_id": user_id, "discount": discount, "user_answer": user_answer}
    collection.update_one({"user_id": user_id}, {"$set": data}, upsert=True)


async def get_user_data(user_id):
    user_data = collection.find_one({"user_id": user_id})
    if user_data:
        discount = user_data.get("discount", 0)
        user_answer = user_data.get("user_answer", "")
        return {"discount": discount, "user_answer": user_answer}
    else:
        return {"discount": 0, "user_answer": ""}


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
